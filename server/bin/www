#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require('../app');
const http = require('http');
const db = require('../db');
const onlineUsers = require('../onlineUsers');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require('socket.io')(server);

io.on('connection', socket => {
  // new user comes online, user opens new user-agent,
  // socket connection for user-agent restarted
  socket.on('add-online-user', (id, socketId, userAgentId) => {
    // if user has no user-agents-obj in onlineUsers object create one
    if (!onlineUsers[id]) {
      onlineUsers[id] = { [userAgentId]: socketId };
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit('add-online-user', id);
    } else {
      // add set socketId for this userAgent in user's user-agent-obj
      onlineUsers[id][userAgentId] = socketId;
    }
  });

  // user sends new message
  socket.on(
    'new-message',
    ({ message, recipientId, sender, senderSkipSocket }) => {
      // send messages to all recipient sockets if user is online
      const recipientUserAgentsObj = onlineUsers[recipientId];
      if (recipientUserAgentsObj) {
        Object.values(recipientUserAgentsObj).forEach(socketId => {
          socket.to(socketId).emit('new-message', {
            message,
            sender,
          });
        });
      }
      // send message to all own sockets except sending socket
      Object.values(onlineUsers[message.senderId]).forEach(socketId => {
        if (socketId !== senderSkipSocket) {
          socket.to(socketId).emit('new-own-message', {
            message,
            sender,
          });
        }
      });
    }
  );

  // user logs out
  socket.on('remove-offline-user', (id, userAgentId) => {
    const userAgentsObj = onlineUsers[id];
    // if userAgentId is online (in obj) delete that userAgent
    if (userAgentsObj && userAgentsObj[userAgentId]) {
      delete onlineUsers[id][userAgentId];
      // if that was the only userAgent for user delete userAgentsObj
      if (Object.keys(onlineUsers[id]).length === 0) {
        delete onlineUsers[id];
        socket.broadcast.emit('remove-offline-user', id);
      }
    }
  });

  // when sent messages have been read
  socket.on(
    'messages-read',
    ({ conversationId, senderId, recipientId, recipientSocketSkip }) => {
      // send message-read to all sender sockets if sender is online
      const senderUserAgentsObj = onlineUsers[senderId];
      if (senderUserAgentsObj) {
        Object.values(senderUserAgentsObj).forEach(socketId => {
          socket.to(socketId).emit('sender-messages-read', {
            conversationId,
          });
        });
      }
      // send message-read to all own sockets except sending socket
      Object.values(onlineUsers[recipientId]).forEach(socketId => {
        if (socketId !== recipientSocketSkip)
          socket.to(socketId).emit('recipient-messages-read', {
            conversationId,
          });
      });
    }
  );
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log('Listening on ' + bind);
}
