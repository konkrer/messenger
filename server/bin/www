#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require('../app');
const http = require('http');
const db = require('../db');
const onlineUsers = require('../onlineUsers');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require('socket.io')(server);

// new user socket comes online
io.on('connection', socket => {
  // new online user data received
  socket.on('add-online-user', id => {
    if (!onlineUsers.has(id)) {
      onlineUsers.add(id);
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit('add-online-user', id);
    }
    // join room named with user id
    socket.join(id);
  });

  // user sends new message
  socket.on('new-message', ({ message, recipientId, sender, senderId }) => {
    // send new-message event to all recipient sockets if recipient is online
    if (onlineUsers.has(recipientId))
      socket.to(recipientId).emit('new-message', {
        message,
        sender,
      });
    // send new-own-message to all of user's own sockets
    socket.to(senderId).emit('new-own-message', {
      message,
      sender,
    });
  });

  // user logs out
  socket.on('remove-offline-user', id => {
    socket.leave(id);
  });

  // when sent messages have been read
  socket.on('messages-read', ({ conversationId, senderId, recipientId }) => {
    // send message-read to all sender sockets if sender is online
    if (onlineUsers.has(senderId))
      socket.to(senderId).emit('sender-messages-read', {
        conversationId,
      });
    // send message-read to all own sockets except sending socket
    socket.to(recipientId).emit('recipient-messages-read', {
      conversationId,
    });
  });

  // when sender is typing
  socket.on('sender-typing', ({ conversationId, otherUserId }) => {
    if (onlineUsers.has(otherUserId)) {
      socket.to(otherUserId).emit('sender-typing', { conversationId });
    }
  });
});

// when a room is deleted from having no more sockets present
// emit 'remove-offline-user' event as user is now offline.
io.of('/').adapter.on('delete-room', room => {
  onlineUsers.delete(room);
  io.emit('remove-offline-user', room);
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log('Listening on ' + bind);
}
